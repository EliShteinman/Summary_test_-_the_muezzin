name: The_muezzin

services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:9.1.2
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - elastic_kafka
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  kibana:
    image: docker.elastic.co/kibana/kibana:9.1.2
    restart: unless-stopped
    depends_on:
      elasticsearch: { condition: service_healthy }
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    networks:
      - elastic_kafka
    volumes:
      - kibana_data:/usr/share/kibana/data
      - kibana_config:/usr/share/kibana/config
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    networks:
      - elastic_kafka
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.2.15
    networks:
      - elastic_kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LISTENERS: PLAINTEXT_INTERNAL://0.0.0.0:29092,PLAINTEXT_C://0.0.0.0:9093,PLAINTEXT_L://0.0.0.0:9092,
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT_INTERNAL://broker:29092,PLAINTEXT_L://localhost:9092,PLAINTEXT_C://broker:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT_INTERNAL:PLAINTEXT,PLAINTEXT_L:PLAINTEXT,PLAINTEXT_C:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL

  kafka-ui:
    image: provectuslabs/kafka-ui
    networks:
      - elastic_kafka
    depends_on:
      - broker
    ports:
      - "7777:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=broker
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=broker:9093
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181

  mongodb:
    image: mongo:latest
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: "admin"
      MONGO_INITDB_ROOT_PASSWORD: "admin123456"
    volumes:
      - mongodb_data:/data/db
    networks:
      - elastic_kafka
    ports:
      - "27017:27017"
    healthcheck:
      test: ["CMD","mongosh","--quiet","--username","admin","--password","admin123456","--eval","db.adminCommand('ping').ok ? 0 : 1"]
      interval: 20s
      timeout: 10s
      retries: 10

  mongo-express:
    image: mongo-express:latest
    restart: unless-stopped
    depends_on:
      mongodb: { condition: service_healthy }
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_SERVER: "mongodb"
      ME_CONFIG_MONGODB_PORT: "27017"
      ME_CONFIG_MONGODB_ADMINUSERNAME: "admin" # שם משתמש במידה והוגדר
      ME_CONFIG_MONGODB_ADMINPASSWORD: "admin123456" # סיסמה במידה והוגדרה
      ME_CONFIG_BASICAUTH: "false"
    networks:
      - elastic_kafka

####################################################
  text_analyzer:
    build:
      dockerfile: analyzer.dockerfile
      context: .
    networks:
      - elastic_kafka
    depends_on:
      - elasticsearch
      - mongodb
      - broker
    volumes:
      - data:/app/data
    environment:
      ANALYZER_HOSTILE_WORDS: "R2Vub2NpZGUsV2FyIENyaW1lcyxBcGFydGhlaWQsTWFzc2FjcmUsTmFrYmEsRGlzcGxhY2VtZW50LEh1bWFuaXRhcmlhbiBDcmlzaXMsQmxvY2thZGUsT2NjdXBhdGlvbixSZWZ1Z2VlcyxJQ0MsQkRT"
      ANALYZER_LESS_HOSTILE_WORDS: "RnJlZWRvbSBGbG90aWxsYSxSZXNpc3RhbmNlLExpYmVyYXRpb24sRnJlZSBQYWxlc3RpbmUsR2F6YSxDZWFzZWZpcmUsUHJvdGVzdCxVTlJXQQ=="
      ANALYZER_DANGEROUS_LIST_SCORE: "8"
      ANALYZER_LESS_DANGEROUS_LIST_SCORE: "4"
      ANALYZER_SCORING_TO_DETERMINE_RISK: "15"
      ANALYZER_MEDIUM_RISK_SCORE: "20"
      ANALYZER_HIGH_RISK_SCORE: "30"
      ANALYZER_NO_RISK_SCORE: ANALYZER_SCORING_TO_DETERMINE_RISK
      ANALYZER_ELASTICSEARCH_PROTOCOL: "http"
      ANALYZER_ELASTICSEARCH_HOST: "elasticsearch"
      ANALYZER_ELASTICSEARCH_PORT: "9200"
      ANALYZER_ELASTICSEARCH_INDEX_DATA: "podcasts"

  preprocessing:
    build:
      dockerfile: preprocessing.dockerfile
      context: .
    networks:
      - elastic_kafka
    depends_on:
      - elasticsearch
      - mongodb
      - broker
    volumes:
      - data:/app/data
    environment:
      PREPROCESSOR_KAFKA_HOST: "broker"
      PREPROCESSOR_KAFKA_PORT: "9093"
      PREPROCESSOR_KAFKA_TOPIC_IN: "podcasts_log"
      PREPROCESSOR_KAFKA_GROUP_ID: "PREPROCESSOR_group"
      PREPROCESSOR_KAFKA_TOPIC_OUT_TO_TRANSCRIPTION: "Transcription_file"
      PREPROCESSOR_KAFKA_TOPIC_OUT_TO_STORAGE: "to_storage"
      PREPROCESSOR_KAFKA_TOPIC_OUT_TO_INDEX: "to_index"



volumes:
  elasticsearch:
  mongodb_data:
  kibana_data:
  kibana_config:
  data:

networks:
  elastic_kafka:
    driver: bridge